name: Deploy pipeline

env:
  AWS_REGION: us-east-2
  AWS_ECR_REPO: learny
  AWS_ECR_REGISTRY: 471112881971.dkr.ecr.us-east-2.amazonaws.com
  AWS_PROD_LAMBDA_FUNCTION_NAME: learny-docker-lambda-prod
  AWS_TEST_LAMBDA_FUNCTION_NAME: learny-docker-lamda-test
  AWS_PROD_S3_BUCKET: learny-s3-sitebucket-prod
  AWS_TEST_S3_BUCKET: learny-s3-sitebucket-test

on:
  workflow_dispatch:
    inputs:
      component:
        type: choice
        description: What to deploy?
        options: 
        - frontend
        - backend
        - both


jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3


    - name: Set environment variables
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
          echo "AWS_S3_BUCKET=${{ env.AWS_PROD_S3_BUCKET }}" >> $GITHUB_ENV
          echo "AWS_LAMBDA_NAME=${{ env.AWS_PROD_LAMBDA_FUNCTION_NAME }}" >> $GITHUB_ENV
          echo "IMAGE_TAG=stable" >> $GITHUB_ENV
        else
          echo "AWS_S3_BUCKET=${{ env.AWS_TEST_S3_BUCKET }}" >> $GITHUB_ENV
          echo "AWS_LAMBDA_NAME=${{ env.AWS_TEST_LAMBDA_FUNCTION_NAME }}" >> $GITHUB_ENV
          echo "IMAGE_TAG=latest" >> $GITHUB_ENV
        fi


    # setup nodejs environment
    - name: Setup Node.js environment
      if: github.event.inputs.component == 'frontend' || github.event.inputs.component == 'both'
      uses: actions/setup-node@v2.1.5
      with:
        node-version: "18.16.1"

    # cache the dependencies to speed up the build
    - name: Cache dependencies
      if: github.event.inputs.component == 'frontend' || github.event.inputs.component == 'both'
      uses: actions/cache@v2
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    # install dependencies
    - name: Install dependencies
      if: github.event.inputs.component == 'frontend' || github.event.inputs.component == 'both'
      run: |
        cd frontend
        npm i

    # build the react app
    - name: Build
      if: github.event.inputs.component == 'frontend' || github.event.inputs.component == 'both'
      env:
        VITE_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        VITE_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        VITE_SUPABASE_REDIRECT_TO: https://mpvoss.com
        VITE_BACKEND_URL: https://mpvoss.com
      run: |
        cd frontend
        npm run build:prod

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2

    - name: Deploy to S3
      if: github.event.inputs.component == 'frontend' || github.event.inputs.component == 'both'
      run: |
        aws s3 ls
        aws s3 sync ./frontend/dist s3://${{env.AWS_S3_BUCKET}} --delete



    - name: Login to Amazon ECR
      if: github.event.inputs.component == 'backend' || github.event.inputs.component == 'both'
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push the tagged docker image to Amazon ECR
      if: github.event.inputs.component == 'backend' || github.event.inputs.component == 'both'
      run: |
        cd backend
        docker build -t ${{env.AWS_ECR_REGISTRY}}/${{env.AWS_ECR_REPO}}:${{env.IMAGE_TAG}} .
        docker push ${{env.AWS_ECR_REGISTRY}}/${{env.AWS_ECR_REPO}}:${{env.IMAGE_TAG}}

    - name: Update Lambda Function Code
      if: github.event.inputs.component == 'backend' || github.event.inputs.component == 'both'
      run: |
        aws lambda update-function-code \
        --function-name ${{env.AWS_LAMBDA_NAME}} \
        --image-uri ${{ env.AWS_ECR_REGISTRY }}/${{ env.AWS_ECR_REPO }}:${{ env.IMAGE_TAG }}
        echo "Waiting for the update to complete..."
        aws lambda wait function-updated --function-name ${{ env.AWS_LAMBDA_NAME }}

